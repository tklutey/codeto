/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/learning_unit': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.learning_unit.id'];
          created_at?: parameters['rowFilter.learning_unit.created_at'];
          course_id?: parameters['rowFilter.learning_unit.course_id'];
          unit_name?: parameters['rowFilter.learning_unit.unit_name'];
          unit_sequence?: parameters['rowFilter.learning_unit.unit_sequence'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['learning_unit'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** learning_unit */
          learning_unit?: definitions['learning_unit'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.learning_unit.id'];
          created_at?: parameters['rowFilter.learning_unit.created_at'];
          course_id?: parameters['rowFilter.learning_unit.course_id'];
          unit_name?: parameters['rowFilter.learning_unit.unit_name'];
          unit_sequence?: parameters['rowFilter.learning_unit.unit_sequence'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.learning_unit.id'];
          created_at?: parameters['rowFilter.learning_unit.created_at'];
          course_id?: parameters['rowFilter.learning_unit.course_id'];
          unit_name?: parameters['rowFilter.learning_unit.unit_name'];
          unit_sequence?: parameters['rowFilter.learning_unit.unit_sequence'];
        };
        body: {
          /** learning_unit */
          learning_unit?: definitions['learning_unit'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/course': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.course.id'];
          created_at?: parameters['rowFilter.course.created_at'];
          course_name?: parameters['rowFilter.course.course_name'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['course'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** course */
          course?: definitions['course'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.course.id'];
          created_at?: parameters['rowFilter.course.created_at'];
          course_name?: parameters['rowFilter.course.course_name'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.course.id'];
          created_at?: parameters['rowFilter.course.created_at'];
          course_name?: parameters['rowFilter.course.course_name'];
        };
        body: {
          /** course */
          course?: definitions['course'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/decorated_denormalized_standards': {
    get: {
      parameters: {
        query: {
          standard_code?: parameters['rowFilter.decorated_denormalized_standards.standard_code'];
          standard_description?: parameters['rowFilter.decorated_denormalized_standards.standard_description'];
          objective_code?: parameters['rowFilter.decorated_denormalized_standards.objective_code'];
          objective_description?: parameters['rowFilter.decorated_denormalized_standards.objective_description'];
          topic_code?: parameters['rowFilter.decorated_denormalized_standards.topic_code'];
          topic_description?: parameters['rowFilter.decorated_denormalized_standards.topic_description'];
          unit_name?: parameters['rowFilter.decorated_denormalized_standards.unit_name'];
          unit_id?: parameters['rowFilter.decorated_denormalized_standards.unit_id'];
          unit_sequence?: parameters['rowFilter.decorated_denormalized_standards.unit_sequence'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['decorated_denormalized_standards'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  '/standard_relationship': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.standard_relationship.id'];
          created_at?: parameters['rowFilter.standard_relationship.created_at'];
          parent_id?: parameters['rowFilter.standard_relationship.parent_id'];
          child_id?: parameters['rowFilter.standard_relationship.child_id'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['standard_relationship'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** standard_relationship */
          standard_relationship?: definitions['standard_relationship'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.standard_relationship.id'];
          created_at?: parameters['rowFilter.standard_relationship.created_at'];
          parent_id?: parameters['rowFilter.standard_relationship.parent_id'];
          child_id?: parameters['rowFilter.standard_relationship.child_id'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.standard_relationship.id'];
          created_at?: parameters['rowFilter.standard_relationship.created_at'];
          parent_id?: parameters['rowFilter.standard_relationship.parent_id'];
          child_id?: parameters['rowFilter.standard_relationship.child_id'];
        };
        body: {
          /** standard_relationship */
          standard_relationship?: definitions['standard_relationship'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/standard_knowledge_state_relationship': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.standard_knowledge_state_relationship.id'];
          created_at?: parameters['rowFilter.standard_knowledge_state_relationship.created_at'];
          knowledge_state_id?: parameters['rowFilter.standard_knowledge_state_relationship.knowledge_state_id'];
          standard_id?: parameters['rowFilter.standard_knowledge_state_relationship.standard_id'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['standard_knowledge_state_relationship'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** standard_knowledge_state_relationship */
          standard_knowledge_state_relationship?: definitions['standard_knowledge_state_relationship'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.standard_knowledge_state_relationship.id'];
          created_at?: parameters['rowFilter.standard_knowledge_state_relationship.created_at'];
          knowledge_state_id?: parameters['rowFilter.standard_knowledge_state_relationship.knowledge_state_id'];
          standard_id?: parameters['rowFilter.standard_knowledge_state_relationship.standard_id'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.standard_knowledge_state_relationship.id'];
          created_at?: parameters['rowFilter.standard_knowledge_state_relationship.created_at'];
          knowledge_state_id?: parameters['rowFilter.standard_knowledge_state_relationship.knowledge_state_id'];
          standard_id?: parameters['rowFilter.standard_knowledge_state_relationship.standard_id'];
        };
        body: {
          /** standard_knowledge_state_relationship */
          standard_knowledge_state_relationship?: definitions['standard_knowledge_state_relationship'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/topics_denormalized': {
    get: {
      parameters: {
        query: {
          standard_id?: parameters['rowFilter.topics_denormalized.standard_id'];
          obj_id?: parameters['rowFilter.topics_denormalized.obj_id'];
          topic_id?: parameters['rowFilter.topics_denormalized.topic_id'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['topics_denormalized'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  '/coding_problem': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.coding_problem.id'];
          created_at?: parameters['rowFilter.coding_problem.created_at'];
          title?: parameters['rowFilter.coding_problem.title'];
          description?: parameters['rowFilter.coding_problem.description'];
          language?: parameters['rowFilter.coding_problem.language'];
          starting_code?: parameters['rowFilter.coding_problem.starting_code'];
          tests?: parameters['rowFilter.coding_problem.tests'];
          youtube_tutorial_url?: parameters['rowFilter.coding_problem.youtube_tutorial_url'];
          source?: parameters['rowFilter.coding_problem.source'];
          solution_code?: parameters['rowFilter.coding_problem.solution_code'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['coding_problem'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** coding_problem */
          coding_problem?: definitions['coding_problem'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.coding_problem.id'];
          created_at?: parameters['rowFilter.coding_problem.created_at'];
          title?: parameters['rowFilter.coding_problem.title'];
          description?: parameters['rowFilter.coding_problem.description'];
          language?: parameters['rowFilter.coding_problem.language'];
          starting_code?: parameters['rowFilter.coding_problem.starting_code'];
          tests?: parameters['rowFilter.coding_problem.tests'];
          youtube_tutorial_url?: parameters['rowFilter.coding_problem.youtube_tutorial_url'];
          source?: parameters['rowFilter.coding_problem.source'];
          solution_code?: parameters['rowFilter.coding_problem.solution_code'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.coding_problem.id'];
          created_at?: parameters['rowFilter.coding_problem.created_at'];
          title?: parameters['rowFilter.coding_problem.title'];
          description?: parameters['rowFilter.coding_problem.description'];
          language?: parameters['rowFilter.coding_problem.language'];
          starting_code?: parameters['rowFilter.coding_problem.starting_code'];
          tests?: parameters['rowFilter.coding_problem.tests'];
          youtube_tutorial_url?: parameters['rowFilter.coding_problem.youtube_tutorial_url'];
          source?: parameters['rowFilter.coding_problem.source'];
          solution_code?: parameters['rowFilter.coding_problem.solution_code'];
        };
        body: {
          /** coding_problem */
          coding_problem?: definitions['coding_problem'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/coding_problem_basis_relationship': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.coding_problem_basis_relationship.id'];
          created_at?: parameters['rowFilter.coding_problem_basis_relationship.created_at'];
          coding_problem_id?: parameters['rowFilter.coding_problem_basis_relationship.coding_problem_id'];
          basis_id?: parameters['rowFilter.coding_problem_basis_relationship.basis_id'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['coding_problem_basis_relationship'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** coding_problem_basis_relationship */
          coding_problem_basis_relationship?: definitions['coding_problem_basis_relationship'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.coding_problem_basis_relationship.id'];
          created_at?: parameters['rowFilter.coding_problem_basis_relationship.created_at'];
          coding_problem_id?: parameters['rowFilter.coding_problem_basis_relationship.coding_problem_id'];
          basis_id?: parameters['rowFilter.coding_problem_basis_relationship.basis_id'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.coding_problem_basis_relationship.id'];
          created_at?: parameters['rowFilter.coding_problem_basis_relationship.created_at'];
          coding_problem_id?: parameters['rowFilter.coding_problem_basis_relationship.coding_problem_id'];
          basis_id?: parameters['rowFilter.coding_problem_basis_relationship.basis_id'];
        };
        body: {
          /** coding_problem_basis_relationship */
          coding_problem_basis_relationship?: definitions['coding_problem_basis_relationship'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/learning_standard': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.learning_standard.id'];
          created_at?: parameters['rowFilter.learning_standard.created_at'];
          code?: parameters['rowFilter.learning_standard.code'];
          description?: parameters['rowFilter.learning_standard.description'];
          type?: parameters['rowFilter.learning_standard.type'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['learning_standard'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** learning_standard */
          learning_standard?: definitions['learning_standard'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.learning_standard.id'];
          created_at?: parameters['rowFilter.learning_standard.created_at'];
          code?: parameters['rowFilter.learning_standard.code'];
          description?: parameters['rowFilter.learning_standard.description'];
          type?: parameters['rowFilter.learning_standard.type'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.learning_standard.id'];
          created_at?: parameters['rowFilter.learning_standard.created_at'];
          code?: parameters['rowFilter.learning_standard.code'];
          description?: parameters['rowFilter.learning_standard.description'];
          type?: parameters['rowFilter.learning_standard.type'];
        };
        body: {
          /** learning_standard */
          learning_standard?: definitions['learning_standard'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/topic_unit_relationship': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.topic_unit_relationship.id'];
          created_at?: parameters['rowFilter.topic_unit_relationship.created_at'];
          topic_id?: parameters['rowFilter.topic_unit_relationship.topic_id'];
          unit_id?: parameters['rowFilter.topic_unit_relationship.unit_id'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['topic_unit_relationship'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** topic_unit_relationship */
          topic_unit_relationship?: definitions['topic_unit_relationship'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.topic_unit_relationship.id'];
          created_at?: parameters['rowFilter.topic_unit_relationship.created_at'];
          topic_id?: parameters['rowFilter.topic_unit_relationship.topic_id'];
          unit_id?: parameters['rowFilter.topic_unit_relationship.unit_id'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.topic_unit_relationship.id'];
          created_at?: parameters['rowFilter.topic_unit_relationship.created_at'];
          topic_id?: parameters['rowFilter.topic_unit_relationship.topic_id'];
          unit_id?: parameters['rowFilter.topic_unit_relationship.unit_id'];
        };
        body: {
          /** topic_unit_relationship */
          topic_unit_relationship?: definitions['topic_unit_relationship'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/basis_knowledge_state': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.basis_knowledge_state.id'];
          created_at?: parameters['rowFilter.basis_knowledge_state.created_at'];
          course_id?: parameters['rowFilter.basis_knowledge_state.course_id'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['basis_knowledge_state'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** basis_knowledge_state */
          basis_knowledge_state?: definitions['basis_knowledge_state'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.basis_knowledge_state.id'];
          created_at?: parameters['rowFilter.basis_knowledge_state.created_at'];
          course_id?: parameters['rowFilter.basis_knowledge_state.course_id'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.basis_knowledge_state.id'];
          created_at?: parameters['rowFilter.basis_knowledge_state.created_at'];
          course_id?: parameters['rowFilter.basis_knowledge_state.course_id'];
        };
        body: {
          /** basis_knowledge_state */
          basis_knowledge_state?: definitions['basis_knowledge_state'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/rpc/get_coding_problems_standards': {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferParams'];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/rpc/get_standards': {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferParams'];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/rpc/get_coding_problem_by_id': {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer */
            id: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferParams'];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/rpc/get_fringe_standards': {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer[] */
            _arr: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferParams'];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/rpc/get_knowledge_state': {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferParams'];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  learning_unit: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `course.id`.<fk table='course' column='id'/>
     */
    course_id?: number;
    /** Format: text */
    unit_name?: string;
    /** Format: bigint */
    unit_sequence?: number;
  };
  course: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    course_name?: string;
  };
  decorated_denormalized_standards: {
    /** Format: text */
    standard_code?: string;
    /** Format: text */
    standard_description?: string;
    /** Format: text */
    objective_code?: string;
    /** Format: text */
    objective_description?: string;
    /** Format: text */
    topic_code?: string;
    /** Format: text */
    topic_description?: string;
    /** Format: text */
    unit_name?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    unit_id?: number;
    /** Format: bigint */
    unit_sequence?: number;
  };
  standard_relationship: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `learning_standard.id`.<fk table='learning_standard' column='id'/>
     */
    parent_id?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `learning_standard.id`.<fk table='learning_standard' column='id'/>
     */
    child_id?: number;
  };
  standard_knowledge_state_relationship: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `basis_knowledge_state.id`.<fk table='basis_knowledge_state' column='id'/>
     */
    knowledge_state_id?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `learning_standard.id`.<fk table='learning_standard' column='id'/>
     */
    standard_id?: number;
  };
  topics_denormalized: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `learning_standard.id`.<fk table='learning_standard' column='id'/>
     */
    standard_id?: number;
    /** Format: bigint */
    obj_id?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `learning_standard.id`.<fk table='learning_standard' column='id'/>
     */
    topic_id?: number;
  };
  coding_problem: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: text */
    title: string;
    /** Format: text */
    description: string;
    /** Format: text */
    language: string;
    /** Format: text */
    starting_code?: string;
    /** Format: json */
    tests?: unknown;
    /** Format: text */
    youtube_tutorial_url?: string;
    /** Format: text */
    source?: string;
    /** Format: text */
    solution_code?: string;
  };
  coding_problem_basis_relationship: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `coding_problem.id`.<fk table='coding_problem' column='id'/>
     */
    coding_problem_id?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `basis_knowledge_state.id`.<fk table='basis_knowledge_state' column='id'/>
     */
    basis_id?: number;
  };
  learning_standard: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: timestamp with time zone */
    created_at?: string;
    /** Format: text */
    code?: string;
    /** Format: text */
    description?: string;
    /** Format: text */
    type?: string;
  };
  topic_unit_relationship: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `learning_standard.id`.<fk table='learning_standard' column='id'/>
     */
    topic_id?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `decorated_denormalized_standards.unit_id`.<fk table='decorated_denormalized_standards' column='unit_id'/>
     */
    unit_id?: number;
  };
  basis_knowledge_state: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `course.id`.<fk table='course' column='id'/>
     */
    course_id?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: 'params=single-object';
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: 'count=none';
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description learning_unit */
  'body.learning_unit': definitions['learning_unit'];
  /** Format: bigint */
  'rowFilter.learning_unit.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.learning_unit.created_at': string;
  /** Format: bigint */
  'rowFilter.learning_unit.course_id': string;
  /** Format: text */
  'rowFilter.learning_unit.unit_name': string;
  /** Format: bigint */
  'rowFilter.learning_unit.unit_sequence': string;
  /** @description course */
  'body.course': definitions['course'];
  /** Format: bigint */
  'rowFilter.course.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.course.created_at': string;
  /** Format: text */
  'rowFilter.course.course_name': string;
  /** @description decorated_denormalized_standards */
  'body.decorated_denormalized_standards': definitions['decorated_denormalized_standards'];
  /** Format: text */
  'rowFilter.decorated_denormalized_standards.standard_code': string;
  /** Format: text */
  'rowFilter.decorated_denormalized_standards.standard_description': string;
  /** Format: text */
  'rowFilter.decorated_denormalized_standards.objective_code': string;
  /** Format: text */
  'rowFilter.decorated_denormalized_standards.objective_description': string;
  /** Format: text */
  'rowFilter.decorated_denormalized_standards.topic_code': string;
  /** Format: text */
  'rowFilter.decorated_denormalized_standards.topic_description': string;
  /** Format: text */
  'rowFilter.decorated_denormalized_standards.unit_name': string;
  /** Format: bigint */
  'rowFilter.decorated_denormalized_standards.unit_id': string;
  /** Format: bigint */
  'rowFilter.decorated_denormalized_standards.unit_sequence': string;
  /** @description standard_relationship */
  'body.standard_relationship': definitions['standard_relationship'];
  /** Format: bigint */
  'rowFilter.standard_relationship.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.standard_relationship.created_at': string;
  /** Format: bigint */
  'rowFilter.standard_relationship.parent_id': string;
  /** Format: bigint */
  'rowFilter.standard_relationship.child_id': string;
  /** @description standard_knowledge_state_relationship */
  'body.standard_knowledge_state_relationship': definitions['standard_knowledge_state_relationship'];
  /** Format: bigint */
  'rowFilter.standard_knowledge_state_relationship.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.standard_knowledge_state_relationship.created_at': string;
  /** Format: bigint */
  'rowFilter.standard_knowledge_state_relationship.knowledge_state_id': string;
  /** Format: bigint */
  'rowFilter.standard_knowledge_state_relationship.standard_id': string;
  /** @description topics_denormalized */
  'body.topics_denormalized': definitions['topics_denormalized'];
  /** Format: bigint */
  'rowFilter.topics_denormalized.standard_id': string;
  /** Format: bigint */
  'rowFilter.topics_denormalized.obj_id': string;
  /** Format: bigint */
  'rowFilter.topics_denormalized.topic_id': string;
  /** @description coding_problem */
  'body.coding_problem': definitions['coding_problem'];
  /** Format: bigint */
  'rowFilter.coding_problem.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.coding_problem.created_at': string;
  /** Format: text */
  'rowFilter.coding_problem.title': string;
  /** Format: text */
  'rowFilter.coding_problem.description': string;
  /** Format: text */
  'rowFilter.coding_problem.language': string;
  /** Format: text */
  'rowFilter.coding_problem.starting_code': string;
  /** Format: json */
  'rowFilter.coding_problem.tests': string;
  /** Format: text */
  'rowFilter.coding_problem.youtube_tutorial_url': string;
  /** Format: text */
  'rowFilter.coding_problem.source': string;
  /** Format: text */
  'rowFilter.coding_problem.solution_code': string;
  /** @description coding_problem_basis_relationship */
  'body.coding_problem_basis_relationship': definitions['coding_problem_basis_relationship'];
  /** Format: bigint */
  'rowFilter.coding_problem_basis_relationship.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.coding_problem_basis_relationship.created_at': string;
  /** Format: bigint */
  'rowFilter.coding_problem_basis_relationship.coding_problem_id': string;
  /** Format: bigint */
  'rowFilter.coding_problem_basis_relationship.basis_id': string;
  /** @description learning_standard */
  'body.learning_standard': definitions['learning_standard'];
  /** Format: bigint */
  'rowFilter.learning_standard.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.learning_standard.created_at': string;
  /** Format: text */
  'rowFilter.learning_standard.code': string;
  /** Format: text */
  'rowFilter.learning_standard.description': string;
  /** Format: text */
  'rowFilter.learning_standard.type': string;
  /** @description topic_unit_relationship */
  'body.topic_unit_relationship': definitions['topic_unit_relationship'];
  /** Format: bigint */
  'rowFilter.topic_unit_relationship.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.topic_unit_relationship.created_at': string;
  /** Format: bigint */
  'rowFilter.topic_unit_relationship.topic_id': string;
  /** Format: bigint */
  'rowFilter.topic_unit_relationship.unit_id': string;
  /** @description basis_knowledge_state */
  'body.basis_knowledge_state': definitions['basis_knowledge_state'];
  /** Format: bigint */
  'rowFilter.basis_knowledge_state.id': string;
  /** Format: timestamp with time zone */
  'rowFilter.basis_knowledge_state.created_at': string;
  /** Format: bigint */
  'rowFilter.basis_knowledge_state.course_id': string;
}

export interface operations {}

export interface external {}
