/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * JDoodle Compiler API
 * JDoodle Compiler API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jdoodle@nutpan.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from 'url';
import * as portableFetch from 'portable-fetch';
import { Configuration } from 'server/client/jdoodle-ts-client/configuration';

const BASE_PATH = 'https://api.jdoodle.com/v1'.replace(/\/+$/, '');

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|'
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
  (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
  url: string;
  options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
  // @ts-ignore
  protected configuration: Configuration;

  constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
    if (configuration) {
      this.configuration = configuration;
      this.basePath = configuration.basePath || this.basePath;
    }
  }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
  // @ts-ignore
  name: 'RequiredError';

  constructor(public field: string, msg?: string) {
    super(msg);
  }
}

/**
 *
 * @export
 * @interface Credit
 */
export interface Credit {
  /**
   *
   * @type {string}
   * @memberof Credit
   */
  clientId?: string;
  /**
   *
   * @type {string}
   * @memberof Credit
   */
  clientSecret?: string;
}

/**
 *
 * @export
 * @interface Execute
 */
export interface Execute {
  /**
   *
   * @type {string}
   * @memberof Execute
   */
  clientId?: string;
  /**
   *
   * @type {string}
   * @memberof Execute
   */
  clientSecret?: string;
  /**
   *
   * @type {string}
   * @memberof Execute
   */
  script?: string;
  /**
   *
   * @type {string}
   * @memberof Execute
   */
  stdin?: string;
  /**
   *
   * @type {string}
   * @memberof Execute
   */
  language?: string;
  /**
   *
   * @type {string}
   * @memberof Execute
   */
  versionIndex?: string;
}

/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
  /**
   * Output
   * @type {string}
   * @memberof InlineResponse200
   */
  output?: string;
  /**
   * Status Code
   * @type {number}
   * @memberof InlineResponse200
   */
  statusCode?: number;
  /**
   * Memory used
   * @type {number}
   * @memberof InlineResponse200
   */
  memory?: number;
  /**
   * CPU Time used
   * @type {number}
   * @memberof InlineResponse200
   */
  cpuTime?: number;
}

/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
  /**
   * No of credits used today
   * @type {number}
   * @memberof InlineResponse2001
   */
  used?: number;
}

/**
 * CreditSpentApi - fetch parameter creator
 * @export
 */
export const CreditSpentApiFetchParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Endpoint to execute code
     * @summary Credit Spent
     * @param {Credit} credit the body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    creditSpentPost(credit: Credit, options: any = {}): FetchArgs {
      // verify required parameter 'credit' is not null or undefined
      if (credit === null || credit === undefined) {
        throw new RequiredError('credit', 'Required parameter credit was null or undefined when calling creditSpentPost.');
      }
      const localVarPath = `/credit-spent`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      // @ts-ignore
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization = <any>'Credit' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(credit || {}) : credit || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * CreditSpentApi - functional programming interface
 * @export
 */
export const CreditSpentApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Endpoint to execute code
     * @summary Credit Spent
     * @param {Credit} credit the body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    creditSpentPost(credit: Credit, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
      const localVarFetchArgs = CreditSpentApiFetchParamCreator(configuration).creditSpentPost(credit, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            // eslint-disable-next-line @typescript-eslint/no-throw-literal
            throw response;
          }
        });
      };
    }
  };
};

/**
 * CreditSpentApi - factory interface
 * @export
 */
export const CreditSpentApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     * Endpoint to execute code
     * @summary Credit Spent
     * @param {Credit} credit the body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    creditSpentPost(credit: Credit, options?: any) {
      return CreditSpentApiFp(configuration).creditSpentPost(credit, options)(fetch, basePath);
    }
  };
};

/**
 * CreditSpentApi - object-oriented interface
 * @export
 * @class CreditSpentApi
 * @extends {BaseAPI}
 */
export class CreditSpentApi extends BaseAPI {
  /**
   * Endpoint to execute code
   * @summary Credit Spent
   * @param {Credit} credit the body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CreditSpentApi
   */
  public creditSpentPost(credit: Credit, options?: any) {
    return CreditSpentApiFp(this.configuration).creditSpentPost(credit, options)(this.fetch, this.basePath);
  }
}

/**
 * ExecuteApi - fetch parameter creator
 * @export
 */
export const ExecuteApiFetchParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Endpoint to execute code
     * @summary Execute Program
     * @param {Execute} execute the body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executePost(execute: Execute, options: any = {}): FetchArgs {
      // verify required parameter 'execute' is not null or undefined
      if (execute === null || execute === undefined) {
        throw new RequiredError('execute', 'Required parameter execute was null or undefined when calling executePost.');
      }
      const localVarPath = `/execute`;
      const localVarUrlObj = url.parse(localVarPath, true);
      const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      // @ts-ignore
      delete localVarUrlObj.search;
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
      const needsSerialization = <any>'Execute' !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.body = needsSerialization ? JSON.stringify(execute || {}) : execute || '';

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * ExecuteApi - functional programming interface
 * @export
 */
export const ExecuteApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Endpoint to execute code
     * @summary Execute Program
     * @param {Execute} execute the body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executePost(execute: Execute, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
      const localVarFetchArgs = ExecuteApiFetchParamCreator(configuration).executePost(execute, options);
      return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
        return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
          if (response.status >= 200 && response.status < 300) {
            return response.json();
          } else {
            // eslint-disable-next-line @typescript-eslint/no-throw-literal
            throw response;
          }
        });
      };
    }
  };
};

/**
 * ExecuteApi - factory interface
 * @export
 */
export const ExecuteApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
  return {
    /**
     * Endpoint to execute code
     * @summary Execute Program
     * @param {Execute} execute the body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executePost(execute: Execute, options?: any) {
      return ExecuteApiFp(configuration).executePost(execute, options)(fetch, basePath);
    }
  };
};

/**
 * ExecuteApi - object-oriented interface
 * @export
 * @class ExecuteApi
 * @extends {BaseAPI}
 */
export class ExecuteApi extends BaseAPI {
  /**
   * Endpoint to execute code
   * @summary Execute Program
   * @param {Execute} execute the body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ExecuteApi
   */
  public executePost(execute: Execute, options?: any) {
    return ExecuteApiFp(this.configuration).executePost(execute, options)(this.fetch, this.basePath);
  }
}
